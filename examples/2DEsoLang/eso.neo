#!/usr/bin/env neo

import "std/collections/stack";
import "std/string" as string;
import "std/math" as math;
import "std/io/file" as file;

proc parseCode(path) {
    final lines = file.readAllLines(path);

    final height = #lines;
    var width = 0;
    for line in lines {
        if #line > width {
            width = #line;
        }
    }

    final grid = [];

    for x in 0 to width - 1 {
        final col = [];
        for y in 0 to height - 1 {
            var line = lines[y];
            if x >= #line  insert(col, " ");
            else  insert(col, line[x]);
        }
        insert(grid, col);
    }

    return grid;
}

proc draw(grid, cx, cy, tlines) {
    final w = #grid - 1;
    final h = #grid[0] - 1; 
    
    var s = "\u001B[2J\u001B[;H";

    for y in 0 to h {
        for x in 0 to w {
            final op = grid[x][y];

            if x == cx && y == cy  s ..= "\u001B[41m";
            
            if op == ">" || op == "<" || op == "^" || op == "v" || op == "#" || op == "?" || op == "@" || op == "~" {
                s ..= "\u001B[36m";
            } else if op == "+" || op == "-" || op == "/" || op == "*" || op == "%" || op == ":" || op == "\\" || op == "$" || op == "." || op == "=" || op == "!" {
                s ..= "\u001B[35;1m";
            } else if isDigit(op) {
                s ..= "\u001B[34;1m";
            } else if isLetter(op) {
                s ..= "\u001B[33m";   
            } else {
                s ..= "\u001B[37m";
            }

            s ..= op;
            s ..= "\u001B[0m";
        }
        s ..= "\n";
    }

    s ..= "\n\u001B[37m";
    for tline in tlines  s ..= tline .. "\n";

    write(s, "\u001B[0m");
}

proc isDigit(c) {
    final b = string.byte(c);
    return b >= 48 && b <= 57;
}

proc isLetter(c) {
    final b = string.byte(c);
    return (b >= 65 && b <= 90) || (b >= 97 && b <= 122);
}

proc main(args) {
    if #args != 1 {
        print("Usage: esolang <file>");
        return;
    }

    final grid = parseCode(args[0]);   

    final MODE_NORMAL = 0;
    final MODE_STRING = 1;
    final MODE_NUMBER = 2;

    var mode = MODE_NORMAL;

    var x = 0;
    var y = 0;
    var dx = 1;
    var dy = 0;

    final stack = Stack();

    final tlines = [];

    proc tprint(line) {
        insert(tlines, line);
        if #tlines > 10  remove(tlines, 0);
    }

    var tmp = "";

    while true {
        draw(grid, x, y, tlines);

        final op = grid[x][y];

        if mode == MODE_NUMBER && !isDigit(op) {
            stack.push(parseNumber(tmp));
            tmp = "";
            mode = MODE_NORMAL;
        } else if mode == MODE_STRING && !isLetter(op) {
            stack.push(tmp);
            tmp = "";
            mode = MODE_NORMAL;
        }

        if op == ">" {
            dx = 1;
            dy = 0;
        } else if op == "<" {
            dx = -1;
            dy = 0;
        } else if op == "^" {
            dx = 0;
            dy = -1;
        } else if op == "v" {
            dx = 0;
            dy = 1;
        } else if op == "#" {
            x += dx;
            y += dy;
        } else if isDigit(op) {
            mode = MODE_NUMBER;
            tmp ..= op;
        } else if isLetter(op) {
            mode = MODE_STRING;
            tmp ..= op;
        } else if op == "." {
            tprint(stack.pop());
        } else if op == "?" {
            final d = math.randInt(0, 3);
            if d == 0 {
                dx = 0;
                dy = 1;
            } else if d == 1 {
                dx = 0;
                dy = -1;
            } else if d == 2 {
                dx = 1;
                dy = 0;
            } else if d == 3 {
                dx = -1;
                dy = 0;
            }
        } else if op == "+" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(a + b);
        } else if op == "-" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(a - b);
        } else if op == "*" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(a * b);
        } else if op == "/" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(a / b);
        } else if op == "%" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(a % b);
        } else if op == ":" {
            final v = stack.pop();
            stack.push(v);
            stack.push(v);
        } else if op == "\\" {
            final b = stack.pop();
            final a = stack.pop();
            stack.push(b);
            stack.push(a);
        } else if op == "$" {
            stack.pop();
        } else if op == "=" {
            stack.push(stack.pop() == stack.pop());
        } else if op == "!" {
            stack.push(!stack.pop());
        } else if op == "@" {
            break;
        } else if op == "~" {
            final b = stack.pop();
            if b {
                x += dx;
                y += dy;
            }
        }

        x += dx;
        y += dy;

        sleep(50);
    }
}