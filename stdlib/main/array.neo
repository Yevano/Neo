import "std/math" as math;
import "std/assert";

exported proc copy(src, srcPos, dest, destPos, length) {
    for i in 0 to length - 1  dest[destPos + i] = src[srcPos + i];
}

exported proc swap(ar, a, b) {
    final tmp = ar[a];
    ar[a] = ar[b];
    ar[b] = tmp;
}

exported proc default_comparator(a, b) {
    if a < b  return -1;
    if a > b  return 1;
    return 0;
}

exported proc sort(a, cmp) {
    if cmp == nil  cmp = default_comparator;

    var length = #a - 1;
    var swapped = true;
    while swapped {
        swapped = false;

        for i in 1 to length {
            if cmp(a[i], a[i - 1]) < 0 {
                swap(a, i, i - 1);
                swapped = true;
            }
        }

        length -= 1;
    }
}

exported proc linearSearch(array, element) {
    assert(type(array) == "array");

    for i in 0 to #array - 1 {
        if array[i] == element  return i;
    }

    return -1;
}

exported proc binarySearch(array, element) {
    assert(type(array) == "array");

    var l = 0;
    var r = #array - 1;

    while l <= r {
        final m = math.floor((l + r) / 2);
        if      array[m] < element  l = m + 1;
        else if array[m] > element  r = m - 1;
        else                        return m;
    }

    return -1;
}