import "std/ffi" as ffi;

final native_Math;

exported final PI;
exported final E;

final random;

proc __init() {
	native_Math = ffi.class("System.Math");

	PI = native_Math.PI;
	E = native_Math.E;

    random = ffi.new("System.Random");
}

exported proc abs(x) => x < 0 ? -x : x
exported proc min(a, b) => a < b ? a : b
exported proc max(a, b) => a > b ? a : b

exported proc sign(x) {
	if x < 0  return -1;
	if x > 0  return 1;
	return 0;
}

exported proc randInt(a, b) {
	if a != nil {
		if b != nil  return random.Next(a, (b + 1));
		else return random.Next(a + 1);
	} else {
		return random.Next();
	}
}

exported proc randFloat() => random.NextDouble()
exported proc randBool() => randInt(0, 1) == 1

exported proc map(x, in_min, in_max, out_min, out_max) => (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
exported proc lerp(t, a, b) => (1 - t) * a + t * b

exported proc constrain(x, min, max) {
	if x < min  return min;
	if x > max  return max;
	return x;
}