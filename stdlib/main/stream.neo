import "std/array" as array;
import "std/assert";
import "std/collections/option";

proc Buffer() {
    var data;
    var full = false;

    return frozen {
        put = proc(v) {
            if full  throw "Buffer is full";
            data = v;
            full = true;
        },
        take = proc() {
            if !full  throw "Buffer is empty";
            final v = data;
            data = nil;
            full = false;
            return v;
        },
        has = proc() => full
    };
}

exported proc Stream(_next, _hasNext) {
    assert(type(_next) == "procedure", "Expected procedure, got " .. type(_next));
    assert(type(_hasNext) == "procedure", "Expected procedure, got " .. type(_hasNext));

    final self = {
        next = proc() {
            if !_hasNext()  throw "next element does not exist";
            return _next();
        },
        hasNext = _hasNext
    };

    self.filter = proc(fn) {
        final buf = Buffer();

        return Stream(
            buf.take,
            proc() {
                if buf.has()  return true;

                var value;
                do {
                    if !self.hasNext()  return false;
                    value = self.next();
                } while !fn(value);

                buf.put(value);
                return true;
            }
        );  
    };

    self.limit = proc(num) {
        var count = 0;

        return Stream(
            proc() {
                count++;
                return self.next();
            },
            proc() {
                if !self.hasNext()  return false;
                return count < num;
            }
        );
    };

    self.limitWhile = proc(predicate) {
        final buf = Buffer();

        return Stream(
            buf.take,
            proc() {
                if buf.has()  return true;

                if self.hasNext() {
                    final x = self.next();
                    if predicate(x) {
                        buf.put(x);
                        return true;
                    }
                }

                return false;
            }
        );
    };

    self.limitUntil = proc(predicate) => self.limitWhile(proc(x) => !predicate(x));

    self.skip = proc(num) {
        assert(num >= 0, "Can't skip a negative number of Stream elements");
        if num == 0  return self;

        var count = 0;
        return Stream(
            self.next,
            proc() {
                while count < num && self.hasNext() {
                    self.next();
                    count++;
                }
                return count == num && self.hasNext();
            }
        );
    };

    self.stride = proc(num) {
        final limit = num - 1;
        assert(limit > 0);

        final buf = Buffer();
        var count = limit;

        return Stream(
            buf.take,
            proc() {
                if buf.has()  return true;

                while self.hasNext() && count < limit {
                    self.next();
                    count += 1;
                }

                if count == limit {
                    count = 0;
                    if self.hasNext() {
                        buf.put(self.next());
                        return true;
                    }
                }

                return false;
            }
        );
    };

    self.map = proc(func) => Stream(proc() => func(self.next()), self.hasNext);

    self.flatMap = proc(func) {
        if !self.hasNext()  return empty();

        var current = func(self.next());

        return Stream(
            proc() => current.next(),
            proc() {
                if current == nil  return false;

                while !current.hasNext() && self.hasNext() {
                    current = func(self.next());
                }

                return current != nil && current.hasNext();
            }
        );
    };

    self.peek = proc(func) => Stream(
        proc() {
            final x = self.next();
            func(x);
            return x;
        },
        self.hasNext
    );

    self.distinct = proc() {
        final buf = Buffer();
        final visited = {};

        return Stream(
            buf.take,
            proc() {
                if buf.has()  return true;
                if !self.hasNext()  return false;

                var value = self.next();
                while visited[value] != nil {
                    if !self.hasNext()  return false;
                    value = self.next();
                }

                visited[value] = true;
                buf.put(value);
                return true;
            }
        );
    };

    self.sorted = proc(comparator) {
        if comparator == nil  comparator = array.default_comparator;
        final a = self.toArray();
        array.sort(a, comparator);
        return fromArray(a);
    };

    self.recur = proc(n) {
        assert(n > 1, "can not recur < 1 times");

        final buf = Option();
        var count = 1;

        return Stream(
            proc() {
                count++;
                return buf.get();
            },
            proc() {
                if self.hasNext() {
                    if !buf.has() || count == n {
                        buf.set(self.next());
                        count = 0;
                    }
                    return true;
                } else {
                    return buf.has() && count < n;       
                }
            }
        );        
    };

    self.count = proc() {
        var count = 0;

        while self.hasNext() {
            self.next();
            count += 1;
        }

        return count;
    };

    self.forEach = proc(func) {
        assert(type(func) == "procedure", "expected procedure, got " .. type(func));

        while self.hasNext()  func(self.next());
    };

    self.reduce = proc(identity, accumulator) {
        if !self.hasNext()  return Option();

        if accumulator == nil {
            accumulator = identity;
            identity = self.next();
        }

        var result = identity;

        while self.hasNext() {
            result = accumulator(result, self.next());
        }

        final ret = Option();
        ret.set(result);
        return ret;
    };

    self.findFirst = proc() {
        final ret = Option();
        if self.hasNext()  ret.set(self.next());
        return ret;
    };

    self.findLast = proc() {
        final ret = Option();
        while self.hasNext()  ret.set(self.next());
        return ret;
    };

    self.toArray = proc() {
        final a = [];
        while self.hasNext()  insert(a, self.next());
        return a;
    };

    self.min = proc(comparator) {        
        final a = self.sorted(comparator);
        final ret = Option();
        if #a > 0  ret.set(a[0]);
        return ret;
    };

    self.max = proc(comparator) {
        final a = self.sorted(comparator);
        final ret = Option();
        if #a > 0  ret.set(a[#a - 1]);
        return ret;
    };

    self.anyMatch = proc(predicate) {
        while self.hasNext() {
            if predicate(self.next())  return true;
        }

        return false;
    };

    self.noneMatch = proc(predicate) => !self.anyMatch(predicate);

    return frozen self;
}

exported proc of(...) => fromArray(...)

exported proc fromArray(a) {
    if #a == 0  return empty();
    if #a == 1  return single(a[0]);

    var index = 0;

    return Stream(
        proc() => a[index++],
        proc() => index < #a
    );
}

exported proc fromOption(o) => o.has() ? single(o.get()) : empty()

exported proc iterate(seed, func) {
    var current = seed;

    return Stream(
        proc() {
            final value = current;
            current = func(current);
            return value;
        },
        proc() => true 
    );
}

exported proc generate(func) => Stream(func, proc() => true)

exported proc concat(...) => fromArray(...).flatMap(proc(x) => x)

exported proc empty() => Stream(proc() => nil, proc() => false)

exported proc single(e) {
    final buf = Buffer();
    buf.put(e);
    return Stream(buf.take, buf.has);
}