import "std/array" as array;
import "std/assert";

exported proc test(t) {
    t.describe("array", proc(t) {
        t.describe("copy", proc(t) {
            final a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
            final b = [ 0, 0, 0, 0];

            array.copy(a, 2, b, 1, 3);

            t.it("works", proc() {
                assert(b[0] == 0);
                for i in 3 to 5  assertEqual(b[i - 2], i);
            });
        });    

        t.describe("swap", proc(t) {
            final a = [ 1, 2, 3, 4, 5 ];
            array.swap(a, 1, 3);

            t.it("works", proc() {
                assertEqual(a[1], 4);
                assertEqual(a[3], 2);
            });
        });

        t.describe("default_comparator", proc(t) {
            final cmp = array.default_comparator;
            
            t.it("works", proc() {
                assertEqual(cmp(1, 2), -1);
                assertEqual(cmp(2, 2), 0);
                assertEqual(cmp(3, 2), 1);
            });
        });

        t.describe("sort", proc(t) {
            final a = [ 5, 3, 2, 1, 4 ];
            array.sort(a);

            t.it("works", proc() {
                for i in 1 to 5  assertEqual(a[i - 1], i);
            });
        });

        t.describe("linearSearch", proc(t) {
            final a = [ 7, 5, 9, 2, 0, 4, 1 ];

            t.it("only accepts arrays", proc() => assertThrows(proc() => array.linearSearch({}, 1)));

            t.it("returns -1 for an element not in the array", proc() => assertEqual(array.linearSearch(a, 42), -1));

            t.it("works", proc() {
                for i in 0 to #a - 1  assertEqual(array.linearSearch(a, a[i]), i);
            });
        });

        t.describe("linearSearch", proc(t) {
            final a = [ 7, 5, 9, 2, 0, 4, 1 ];

            t.it("only accepts arrays", proc() => assertThrows(proc() => array.binarySearch({}, 1)));

            t.it("returns -1 for an element not in the array", proc() => assertEqual(array.binarySearch(a, 42), -1));

            t.it("works", proc() {
                for i in 0 to #a - 1  assertEqual(array.linearSearch(a, a[i]), i);
            });
        });
    });
}