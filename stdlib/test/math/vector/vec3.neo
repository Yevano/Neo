import "std/math/vector/vec3";
import "std/assert";

exported proc test(t) {
    t.describe("Vec3", proc(t) {
        t.describe("add", proc(t) {
            t.it("works", proc() {
                final a = Vec3(1, 4, 9);
                final b = Vec3(9, 1, 4);

                final c = a + b;

                assertEqual(c.x, 10);
                assertEqual(c.y, 5);
                assertEqual(c.z, 13);
            });
        });

        t.describe("sub", proc(t) {
            t.it("works", proc() {
                final a = Vec3(1, 4, 9);
                final b = Vec3(9, 1, 4);

                final c = a - b;

                assertEqual(c.x, -8);
                assertEqual(c.y, 3);
                assertEqual(c.z, 5);                
            });
        });

        t.describe("mul", proc(t) {
            t.it("works", proc() {
                final a = Vec3(3.5, 2, 6);

                final c = a * 2;

                assertEqual(c.x, 7);
                assertEqual(c.y, 4);
                assertEqual(c.z, 12);
            });
        });

        t.describe("div", proc(t) {
            t.it("works", proc() {
                final a = Vec3(6, 14, 2);

                final c = a / 2;

                assertEqual(c.x, 3);
                assertEqual(c.y, 7);
                assertEqual(c.z, 1);
            });
        });

        t.describe("neg", proc(t) {
            t.it("works", proc() {
                final a = Vec3(3, 12, -7);

                final c = -a;

                assertEqual(c.x, -3);
                assertEqual(c.y, -12);
                assertEqual(c.z, 7);
            });
        });

        t.describe("equals", proc(t) {
            t.it("works when two Vec3s are equal", proc() {
                final a = Vec3(3, 7, 12);
                final b = Vec3(3, 7, 12);
                assertEqual(a, b);
                assertDeepEqual(a, b);
            });
            
            t.it("works when two Vec3s are not equal", proc() {
                final a = Vec3(3, 7, 12);
                final b = Vec3(3, 6, 12);
                assertNotEqual(a, b);
                assertNotDeepEqual(a, b);
            });
        });

        t.describe("tostring", proc(t) {
            t.it("works", proc() {
                assertEqual("" .. Vec3(3.5, 7, 12), "(3.5, 7, 12)");    
            });
        });
    });
}